#include <lcom/lcf.h>

#include <lcom/lab2.h>
#include <lcom/timer.h>

#include <stdbool.h>
#include <stdint.h>
#include "i8254.h"

int main(int argc, char *argv[]) {
  // sets the language of LCF messages (can be either EN-US or PT-PT)
  lcf_set_language("EN-US");

  // enables to log function invocations that are being "wrapped" by LCF
  // [comment this out if you don't want/need/ it]
  lcf_trace_calls("/home/lcom/labs/lab2/trace.txt");

  // enables to save the output of printf function calls on a file
  // [comment this out if you don't want/need it]
  lcf_log_output("/home/lcom/labs/lab2/output.txt");

  // handles control over to LCF
  // [LCF handles command line arguments and invokes the right function]
  if (lcf_start(argc, argv))
    return 1;

  // LCF clean up tasks
  // [must be the last statement before return]
  lcf_cleanup();

  return 0;
}

//==================================================================================================
//==================================================================================================

int(timer_test_read_config)(uint8_t timer, enum timer_status_field field) {
 uint8_t status;
 timer_get_conf(timer,&status);
 timer_display_conf(timer,status,field);
 return 1;
}

//==================================================================================================
//==================================================================================================

int(timer_test_time_base)(uint8_t timer, uint32_t freq) {
  return timer_set_frequency(timer, freq);
}

//==================================================================================================
//==================================================================================================

int(timer_test_int)(uint8_t UNUSED(time)) {
 

  int ipc_status;
  message msg;
  uint8_t *bit_no;
  *bit_no = TIMER_HOOK_BIT_SELECT;
  
  if (timer_subscribe_int(bit_no) == 1) {
    return NOT_OK;
  }



  if(timer_subscribe_int())

 
  while( 1 ) { /* You may want to use a different condition */
     /* Get a request message. */
     if ( (r = driver_receive(ANY, &msg, &ipc_status)) != 0 ) { 
         printf("driver_receive failed with: %d", r);
       continue;
    }
    if (is_ipc_notify(ipc_status)) { /* received notification */
        switch (_ENDPOINT_P(msg.m_source)) {
            case HARDWARE: /* hardware interrupt notification */				
              if (msg.m_notify.interrupts & irq_set) { /* subscribed interrupt */
                     /* process it */
                }
                break;
            default:
                break; /* no other notifications expected: do nothing */	
        }
    } else { /* received a standard message, not a notification */
        /* no standard messages expected: do nothing */
    }
 }

  return 1;
}

//==================================================================================================
//==================================================================================================

int(util_get_LSB)(uint16_t val, uint8_t *lsb) {
 
 uint8_t timer_lsb = (uint8_t) val;
 *lsb=timer_lsb;
 
  return 1;
}

//==================================================================================================
//==================================================================================================

int(util_get_MSB)(uint16_t val, uint8_t *msb) {
  uint8_t timer_msb = (uint8_t) (val >> (8));
  *msb=timer_msb;

  return 1;
}
