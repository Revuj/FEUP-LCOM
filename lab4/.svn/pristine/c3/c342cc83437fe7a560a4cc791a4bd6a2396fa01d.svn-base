#include "mouse.h"
#include "keyboard.h"
#include "i8042.h"
#include <lcom/lcf.h>
#include <minix/sysutil.h>

static int mouse_hook_id = MOUSE_HOOK_BIT_SELECT;
uint32_t data;
static int mouse_error_flag;

int mouse_subscribe_int(uint8_t *bit_no) {

  if (bit_no == NULL) {
    return 1;
  }
  else {
    // DD avisa o GIH que esta interessada numa interrupcao (DD,politica de interrupcao,*hook_id)
    *bit_no = mouse_hook_id;

    if (sys_irqsetpolicy(MOUSE_IRQ, IRQ_REENABLE | IRQ_EXCLUSIVE, &mouse_hook_id) != OK) {
      return 1;
    }

    return OK;
  }
}

//================================================================================================
//================================================================================================
/* unsubscribes mouse interruptions */

int mouse_unsubscribe_int() {


  if (sys_irqrmpolicy(&mouse_hook_id) != OK) {
    return 1;
  }
  return OK;
}

//==================================================================================================
//==================================================================================================
/*checks if the data in the status is valid */

bool mouse_is_valid_data(uint32_t stat) {

  if ((stat & (PAR_ERR | TO_ERR)) != OK) {
    return false;
  }

  return true;
}

//==================================================================================================
//==================================================================================================
/*mouse interrupt handler */

void(mouse_ih)(void) {

  mouse_read_obf();

  return;
}

//==================================================================================================
//==================================================================================================
/* read packet bytes*/

bool get_packet(uint8_t packet_byte, struct packet *pp, uint8_t *byte_counter) {

  if (*byte_counter == 0) {
    if ((packet_byte & BIT(3)) == 0) {
      return false;
    }
    *byte_counter = 1;
    pp->bytes[0] = packet_byte;
    pp->mb = (packet_byte & MB_BIT);
    pp->rb = (packet_byte & RB_BIT);
    pp->lb = (packet_byte & LB_BIT);
    pp->x_ov = (packet_byte & X_OVF);
    pp->y_ov = (packet_byte & Y_OVF);
    return false;
  }

  else if (*byte_counter == 1) {
    *byte_counter = 2;
    pp->bytes[1] = packet_byte;
    if (pp->bytes[0] & BIT(4)) {
           pp->delta_x = packet_byte -256;       
    }
    else {
      pp->delta_x = packet_byte;
    }
    return false;
  }

  else {
    *byte_counter = 0;
    pp->bytes[2] = packet_byte;
    if (pp->bytes[0] & BIT(5)) {
      pp->delta_y = packet_byte - 256;      
    }
    else {
      pp->delta_y = packet_byte;
    }
    return true;
  }

}

//==================================================================================================
//==================================================================================================

bool mouse_read_obf() {
  uint32_t stat;

  uint8_t retries = 10;

  while (retries > 0) { //loop to write argument

    if (sys_inb(KBC_STAT_REG, &stat) == OK) { //gets status byte

      if ((stat & OBF) == 1) { //Output buffer is full
        if (sys_inb(KBC_OUT_BUF, &data) == OK) {   //read command
          if (mouse_is_valid_data(stat) == true) {
            mouse_error_flag = 0;
            return true;
          }
        }
      }
    }
    mouse_error_flag = 1;
    retries--;
  }

  mouse_error_flag = 1;
  return false;
}

//==================================================================================================
//==================================================================================================

int mouse_write_command(uint16_t command) {

  if (kbc_write_command_with_argument(KBC_WRITE_TO_MOUSE, command) != OK) {
    return NOT_OK;
  }

  
 // while (1) {
    mouse_read_obf();
    return OK;
  //  if (mouse_get_data() == MOUSE_ACK) {
  //   return OK;
  //  }
  
}

//================================================================================================
//================================================================================================
/*returns the global variable data defined in the keyboard's scope*/

uint32_t mouse_get_data() {
  return data;
}

//================================================================================================
//================================================================================================
/*returns the global variable mouse_error_flag defined in the keyboard's scope*/

int mouse_get_error() {
  return mouse_error_flag;
}
