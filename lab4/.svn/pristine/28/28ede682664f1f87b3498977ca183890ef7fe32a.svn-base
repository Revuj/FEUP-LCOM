#include <lcom/lcf.h>
#include "keyboard.h"
#include <minix/sysutil.h>

/* global variables */
static int kbc_hook_id = KBC_HOOK_BIT_SELECT;
int count = 0;
static uint32_t data;
static int error_flag;

//================================================================================================
//================================================================================================
/* subscribes keyboard interruptions */

int kbc_subscribe_int(uint8_t *bit_no) {

  if (bit_no == NULL) {
    return 1;
  }
  else {
    // DD avisa o GIH que esta interessada numa interrupcao (DD,politica de interrupcao,*hook_id)
    *bit_no = kbc_hook_id;
    if (sys_irqsetpolicy(KBC_IRQ, IRQ_REENABLE | IRQ_EXCLUSIVE, &kbc_hook_id) != OK) {
      return 1;
    }
    return OK;
  }
}

//================================================================================================
//================================================================================================
/* unsubscribes keyboard interruptions */

int kbc_unsubscribe_int() {

  if (sys_irqrmpolicy(&kbc_hook_id) != OK) {
    return 1;
  }
  return OK;
}

//================================================================================================
//================================================================================================
/*checks if the data in the status is valid */

bool kbc_is_valid_data(uint32_t stat) {

  if ((stat & OBF) == 1) {

    if ((stat & PAR_ERR & TO_ERR) != OK) {
      return false;
    }
  }

  else {
    return false;
  }

  return true;
}

//================================================================================================
//================================================================================================
/*reads output buffer*/

bool kbd_read_obf() {

  uint32_t stat;

  if (sys_inb(KBC_STAT_REG, &stat) != OK) { //read status register and puts it on stat
    error_flag = 1;
    return false;
  }

  if (kbc_is_valid_data(stat)) {

    if (sys_inb(KBC_OUT_BUF, &data) != OK) {
      error_flag = 1;
      return false;
    }
  }
  else {
    error_flag = 1;
    return false;
  }

  error_flag = 0;
  return true;
}

//================================================================================================
//================================================================================================

int kbc_write_command(uint16_t command) {
  uint32_t stat;
  uint8_t retries = 10;

  while (retries > 0) {                       //loop to write argument
    if (sys_inb(KBC_STAT_REG, &stat) == OK) { //gets status byte

      if ((stat & IBF) == 0) {                           //Input buffer is not full
        if (sys_outb(KBC_CMD_REGISTER, command) == OK) { //write command
          return OK;
        }
        else {
          return NOT_OK;
        }
      }
    }
    else {
      return NOT_OK;
    }

    tickdelay(micros_to_ticks(DELAY_US));
    retries--;
  }
  return NOT_OK;
}

//================================================================================================
//================================================================================================

int kbc_write_command_with_argument(uint16_t command, uint16_t argument) {
  uint32_t stat;
  uint8_t retries = 10;

  kbc_write_command(command);

  while (retries > 0) { //loop to write argument

    if (sys_inb(KBC_STAT_REG, &stat) == OK) { //gets status byte

      if ((stat & IBF) == 0) {                      //Input buffer is not full
        if (sys_outb(KBC_OUT_BUF, argument) == OK) { //write argument
          return OK;
        }
      }
    }

    tickdelay(micros_to_ticks(DELAY_US));
    retries--;
  }
  return NOT_OK;
}

//================================================================================================
//================================================================================================

